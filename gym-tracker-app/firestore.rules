rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser(data) {
      return data.keys().hasAll(['email', 'createdAt']) &&
             data.email is string &&
             data.createdAt is timestamp;
    }
    
    function isValidWorkoutPlan(data) {
      return data.keys().hasAll(['userId', 'name', 'exercises', 'createdAt', 'updatedAt']) &&
             data.userId is string &&
             data.name is string &&
             data.exercises is list &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    function isValidWorkoutSession(data) {
      return data.keys().hasAll(['userId', 'planId', 'planName', 'startTime', 'status']) &&
             data.userId is string &&
             data.planId is string &&
             data.planName is string &&
             data.startTime is timestamp &&
             data.status in ['active', 'paused', 'completed', 'cancelled'];
    }
    
    // Users collection
    match /users/{userId} {
      // Allow users to read and write their own data
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidUser(request.resource.data);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // Workout Plans collection
    match /workoutPlans/{planId} {
      // Allow users to read and write their own workout plans
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       isValidWorkoutPlan(request.resource.data);
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow listing workout plans for the authenticated user
      allow list: if isAuthenticated() && 
                     request.query.limit <= 100;
    }
    
    // Workout Sessions collection
    match /workoutSessions/{sessionId} {
      // Allow users to read and write their own workout sessions
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       isValidWorkoutSession(request.resource.data);
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow listing workout sessions for the authenticated user
      allow list: if isAuthenticated() && 
                     request.query.limit <= 100;
    }
    
    // Progress data collection (for future use)
    match /progress/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      // Sub-collections for detailed progress tracking
      match /exercises/{exerciseId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
      
      match /measurements/{measurementId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
